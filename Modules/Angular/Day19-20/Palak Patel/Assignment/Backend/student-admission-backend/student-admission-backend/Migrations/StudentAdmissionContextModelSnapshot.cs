// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using student_admission_backend.Models;

namespace student_admission_backend.Migrations
{
    [DbContext(typeof(StudentAdmissionContext))]
    partial class StudentAdmissionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("student_admission_backend.Models.Address", b =>
                {
                    b.Property<int>("addressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("pincode")
                        .HasColumnType("int");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("addressId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("student_admission_backend.Models.EmergencyContact", b =>
                {
                    b.Property<int>("EmergencyContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PhoneNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Relation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("EmergencyContactId");

                    b.HasIndex("StudentId");

                    b.ToTable("EmergencyContact");
                });

            modelBuilder.Entity("student_admission_backend.Models.FatherDetail", b =>
                {
                    b.Property<int>("fatherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FatherDesignation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FatherEQ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FatherEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FatherFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FatherLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FatherMiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("FatherPhone")
                        .HasColumnType("bigint");

                    b.Property<string>("FatherProfession")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("fatherId");

                    b.ToTable("FatherDetails");
                });

            modelBuilder.Entity("student_admission_backend.Models.MotherDetail", b =>
                {
                    b.Property<int>("MotherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MotherDesignation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MotherEQ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MotherEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MotherFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MotherLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MotherMiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("MotherPhone")
                        .HasColumnType("bigint");

                    b.Property<string>("MotherProfession")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("MotherId");

                    b.ToTable("MotherDetails");
                });

            modelBuilder.Entity("student_admission_backend.Models.PersonalDetail", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StudentFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StudentLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StudentMiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StudentId");

                    b.ToTable("PersonalDetails");
                });

            modelBuilder.Entity("student_admission_backend.Models.Reference", b =>
                {
                    b.Property<int>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReferenceAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReferenceThrough")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ReferenceId");

                    b.HasIndex("StudentId");

                    b.ToTable("References");
                });

            modelBuilder.Entity("student_admission_backend.Models.EmergencyContact", b =>
                {
                    b.HasOne("student_admission_backend.Models.PersonalDetail", "Student")
                        .WithMany("emergencyContacts")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_EmergencyContact_StudentDetails")
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("student_admission_backend.Models.PersonalDetail", b =>
                {
                    b.HasOne("student_admission_backend.Models.MotherDetail", "motherDetails")
                        .WithOne("Student")
                        .HasForeignKey("student_admission_backend.Models.PersonalDetail", "StudentId")
                        .HasConstraintName("FK_MotherDetails_StudentDetails")
                        .IsRequired();

                    b.HasOne("student_admission_backend.Models.Address", "address")
                        .WithOne("Student")
                        .HasForeignKey("student_admission_backend.Models.PersonalDetail", "StudentId")
                        .HasConstraintName("FK_Address_StudentDetails")
                        .IsRequired();

                    b.HasOne("student_admission_backend.Models.FatherDetail", "fatherDetails")
                        .WithOne("Student")
                        .HasForeignKey("student_admission_backend.Models.PersonalDetail", "StudentId")
                        .HasConstraintName("FK_FatherDetails_StudentDetails")
                        .IsRequired();

                    b.Navigation("address");

                    b.Navigation("fatherDetails");

                    b.Navigation("motherDetails");
                });

            modelBuilder.Entity("student_admission_backend.Models.Reference", b =>
                {
                    b.HasOne("student_admission_backend.Models.PersonalDetail", "Student")
                        .WithMany("references")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_ReferenceDetails_StudentDetails")
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("student_admission_backend.Models.Address", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("student_admission_backend.Models.FatherDetail", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("student_admission_backend.Models.MotherDetail", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("student_admission_backend.Models.PersonalDetail", b =>
                {
                    b.Navigation("emergencyContacts");

                    b.Navigation("references");
                });
#pragma warning restore 612, 618
        }
    }
}
